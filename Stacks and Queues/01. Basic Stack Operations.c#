/* Play around with a stack. You will be given an integer N representing the number of elements to push into the stack, 
 * an integer S representing the number of elements to pop from the stack, and finally an integer X, 
 * an element that you should look for in the stack. If it's found, print "true" on the console. 
 * If it isn't, print the smallest element currently present in the stack. If there are no elements in the sequence, print 0 on the console.
Input
•	On the first line, you will be given N, S and X, separated by a single space.
•	On the next line, you will be given N number of integers.
Output
•	On a single line, print either true if X is present in the stack, otherwise print the smallest element in the stack. If the stack is empty, print 0.
Examples
5 2 13
1 13 45 32 4 => true	

4 1 666
420 69 13 666 => 13	

3 3 90
90 90 90 => 0	
*/

int numberOfElementsToPush, numberOfElementsToPop, numberToLookFor;
int[] numbers = Console.ReadLine()
    .Split(" ", StringSplitOptions.RemoveEmptyEntries)
    .Select(int.Parse)
    .Take(3)
    .ToArray();

numberOfElementsToPush = numbers[0];
numberOfElementsToPop = numbers[1];
numberToLookFor = numbers[2];

int[] numbersForStack = Console.ReadLine()
    .Split(" ", StringSplitOptions.RemoveEmptyEntries)
    .Select(int.Parse)
    .Take(numberOfElementsToPush)
    .ToArray();

var stack = new Stack<int>();

foreach (var number in numbersForStack)
{
    stack.Push(number);
}

for (int i = 0; i < numberOfElementsToPop; i++)
{
    stack.Pop();
}

if (stack.Contains(numberToLookFor))
{
    Console.WriteLine("true");
}
else if (!stack.Contains(numberToLookFor) && stack.Count > 0)
{
    Console.WriteLine(stack.Min());
}
else
{
    Console.WriteLine("0");
}
